// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @default(now())
  password      String?   @db.Text
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  testCases     TestCase[]
  testPlans     TestPlan[]
  executedTests TestExecution[]
  knowledgeBases KnowledgeBase[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TestCase {
  id          String   @id @default(cuid())
  title       String
  description String?
  steps       String
  expected    String
  status      String   @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  testPlan    TestPlan? @relation(fields: [testPlanId], references: [id])
  testPlanId  String?
  executions  TestExecution[]
}

model TestPlan {
  id          String     @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      String     @default("PLANNING")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String
  testCases   TestCase[]
  executions  TestExecution[]
}

model TestExecution {
  id           String     @id @default(cuid())
  testPlan     TestPlan   @relation(fields: [testPlanId], references: [id])
  testPlanId   String
  testCase     TestCase   @relation(fields: [testCaseId], references: [id])
  testCaseId   String
  status       String     @default("PENDING")
  result       String?
  executedBy   User       @relation(fields: [executedById], references: [id])
  executedById String
  executedAt   DateTime   @default(now())
  comments     String?
}

model KnowledgeBase {
  id          String     @id @default(cuid())
  title       String
  content     String     @db.Text
  category    String
  tags        String[]
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
