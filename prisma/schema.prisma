// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Priority {
  P0
  P1
  P2
  P3
}

enum TicketStatus {
  PENDING   // 待评估
  SCHEDULED // 已排期
  DEVELOPING // 研发中
  PAUSED    // 已暂停
  LIVE      // 已上线
  CLOSED    // 已关闭
}

enum ProjectType {
  HINA
  XUNXIN
}

model Project {
  id          String     @id @default(cuid())
  name        String
  type        ProjectType
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  testCases   TestCase[]
  testPlans   TestPlan[]
  tickets     Ticket[]
  bugs        Bug[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @default(now())
  password      String?   @db.Text
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  testCases     TestCase[]
  testPlans     TestPlan[]
  executedTests TestExecution[]
  knowledgeBases KnowledgeBase[]
  createdTickets Ticket[] @relation("TicketCreator")
  assignedTickets Ticket[] @relation("TicketAssignee")
  bugs          Bug[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TestCase {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id])
  isAutomated Boolean  @default(false)
  projectId   String
  title       String
  description String?
  steps       String
  expected    String
  status      String   @default("DRAFT")
  priority    Priority @default(P2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  testPlan    TestPlan? @relation(fields: [testPlanId], references: [id])
  testPlanId  String?
  executions  TestExecution[]
  isAIGenerated Boolean @default(false)
  aiPrompt     String?
  aiHistory    Json?
  relatedTickets Ticket[] @relation("TestCaseTickets")
  bugs        Bug[]
}

model TestPlan {
  id            String     @id @default(cuid())
  project       Project    @relation(fields: [projectId], references: [id])
  projectId     String
  name          String
  description   String?
  content       String?    @db.Text
  implementation String?   @db.Text
  status        String     @default("PLANNING")
  startDate     DateTime?
  endDate       DateTime?
  isAIGenerated Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdBy     User       @relation(fields: [createdById], references: [id])
  createdById   String
  testCases     TestCase[]
  executions    TestExecution[]
  relatedTickets Ticket[] @relation("TestPlanTickets")
}

model TestExecution {
  id           String     @id @default(cuid())
  testPlan     TestPlan   @relation(fields: [testPlanId], references: [id])
  testPlanId   String
  testCase     TestCase   @relation(fields: [testCaseId], references: [id])
  testCaseId   String
  status       String     @default("PENDING")
  result       String?
  executedBy   User       @relation(fields: [executedById], references: [id])
  executedById String
  executedAt   DateTime   @default(now())
  comments     String?
}

model KnowledgeBase {
  id          String     @id @default(cuid())
  title       String
  content     String     @db.Text
  category    String
  tags        String[]
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String
}

model Ticket {
  id          String      @id @default(cuid())
  project     Project     @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String?
  status      TicketStatus @default(PENDING)
  priority    Priority    @default(P2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation(name: "TicketCreator", fields: [createdById], references: [id])
  createdById String
  assignedTo  User?       @relation(name: "TicketAssignee", fields: [assignedToId], references: [id])
  assignedToId String?
  relatedTestCase TestCase? @relation(name: "TestCaseTickets", fields: [relatedTestCaseId], references: [id])
  relatedTestCaseId String?
  relatedTestPlan TestPlan? @relation(name: "TestPlanTickets", fields: [relatedTestPlanId], references: [id])
  relatedTestPlanId String?
  bugs        Bug[]
}

model Bug {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      String      @default("OPEN")
  priority    Priority    @default(P2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation(fields: [createdById], references: [id])
  createdById String
  ticket      Ticket      @relation(fields: [ticketId], references: [id])
  ticketId    String
  testCase    TestCase?   @relation(fields: [testCaseId], references: [id])
  testCaseId  String?
  project     Project     @relation(fields: [projectId], references: [id])
  projectId   String
}
